{"ast":null,"code":"import _defineProperty from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nvar allState = Object.assign(indexState, postState, comState);\nvar initialState = Object.keys(allState).map(function (key) {\n  return _defineProperty({}, key, allState[key]()['default']);\n});\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // const backState = null;\n  if (action.type === 'handleLabelPage') {\n    return allState['labelPage'](action.page)['data'];\n  } // Object.keys(allState).forEach(element => {\n  //     if (action.type === allState[element]()['type']) {\n  //         backState = allState[element]()['data']\n  //     }\n  // });\n  // return backState? backState: state;\n\n\n  if (action.type === 'testHandle') {\n    return {\n      indexPage: {\n        articleData: action.data\n      }\n    };\n  }\n\n  return state;\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  var store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","allState","Object","assign","initialState","keys","map","key","reducer","state","action","type","page","indexPage","articleData","data","initializeStore","store"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,CAAjB;AAEA,IAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,UAAAC,GAAG,EAAI;AAClD,6BACKA,GADL,EACWN,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB,CADX;AAGH,CAJoB,CAArB;;AAMA,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AAC3C;AACA,MAAIA,MAAM,CAACC,IAAP,KAAgB,iBAApB,EAAuC;AACnC,WAAOV,QAAQ,CAAC,WAAD,CAAR,CAAsBS,MAAM,CAACE,IAA7B,EAAmC,MAAnC,CAAP;AACH,GAJ0C,CAK3C;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIF,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAC9B,WAAO;AACHE,MAAAA,SAAS,EAAE;AACPC,QAAAA,WAAW,EAAEJ,MAAM,CAACK;AADb;AADR,KAAP;AAKH;;AACD,SAAON,KAAP;AACH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASO,eAAT,CAAyBP,KAAzB,EAAgC;AAE3C,MAAMQ,KAAK,GAAGtB,WAAW,CACrBa,OADqB,EAErBN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCK,KAAhC,CAFqB,EAGrBb,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOoB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\n\nconst allState = Object.assign(indexState, postState, comState);\n\nconst initialState = Object.keys(allState).map(key => {\n    return {\n        [key]: allState[key]()['default']\n    }\n})\n\nfunction reducer(state = initialState, action) {\n    // const backState = null;\n    if (action.type === 'handleLabelPage') {\n        return allState['labelPage'](action.page)['data'];\n    }\n    // Object.keys(allState).forEach(element => {\n    //     if (action.type === allState[element]()['type']) {\n    //         backState = allState[element]()['data']\n    //     }\n    // });\n    // return backState? backState: state;\n    if (action.type === 'testHandle') {\n        return {\n            indexPage: {\n                articleData: action.data\n            }\n        };\n    }\n    return state;\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}