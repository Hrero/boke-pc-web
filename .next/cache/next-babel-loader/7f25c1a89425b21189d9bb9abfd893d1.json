{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nconst allState = Object.assign(indexState, postState, comState);\nconst initialState = Object.keys(allState).map(key => {\n  return {\n    [key]: allState[key]()['default']\n  };\n}); // function reducer(state = initialState, action) {\n//     if (action.type === 'handleLabelPage') {\n//         return {\n//             labelPage: Number(action.labelPage)\n//         };\n//     }\n//     if (action.type === 'testHandle') {\n//         return {\n//             indexPage: {\n//                 articleData: action.data\n//             }\n//         };\n//     }\n//     return state;\n// }\n\nfunction reducer(state = initialState, action) {\n  const returnState = {};\n  Object.keys(allState).forEach(rer => {\n    console.log(rer, action.type);\n\n    if (action.type === rer) {\n      returnState = allState[rer]()['data'];\n    }\n  });\n  console.log(returnState); // if (action.type === 'handleLabelPage') {\n  //     return {\n  //         labelPage: Number(action.labelPage)\n  //     };\n  // }\n  // if (action.type === 'testHandle') {\n  //     return {\n  //         indexPage: {\n  //             articleData: action.data\n  //         }\n  //     };\n  // }\n\n  return returnState;\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  const store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","allState","Object","assign","initialState","keys","map","key","reducer","state","action","returnState","forEach","rer","console","log","type","initializeStore","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,CAAjB;AAEA,MAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0BC,GAAG,IAAI;AAClD,SAAO;AACH,KAACA,GAAD,GAAON,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB;AADJ,GAAP;AAGH,CAJoB,CAArB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,OAAT,CAAiBC,KAAK,GAAGL,YAAzB,EAAuCM,MAAvC,EAA+C;AAC3C,QAAMC,WAAW,GAAG,EAApB;AACAT,EAAAA,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBW,OAAtB,CAA8BC,GAAG,IAAI;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiBH,MAAM,CAACM,IAAxB;;AACA,QAAIN,MAAM,CAACM,IAAP,KAAgBH,GAApB,EAAyB;AACrBF,MAAAA,WAAW,GAAGV,QAAQ,CAACY,GAAD,CAAR,GAAgB,MAAhB,CAAd;AACH;AACJ,GALD;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ,EAR2C,CAS3C;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOA,WAAP;AACH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASM,eAAT,CAAyBR,KAAzB,EAAgC;AAE3C,QAAMS,KAAK,GAAGvB,WAAW,CACrBa,OADqB,EAErBN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCK,KAAhC,CAFqB,EAGrBb,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOqB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\n\nconst allState = Object.assign(indexState, postState, comState);\n\nconst initialState = Object.keys(allState).map(key => {\n    return {\n        [key]: allState[key]()['default']\n    }\n})\n\n// function reducer(state = initialState, action) {\n//     if (action.type === 'handleLabelPage') {\n//         return {\n//             labelPage: Number(action.labelPage)\n//         };\n//     }\n\n//     if (action.type === 'testHandle') {\n//         return {\n//             indexPage: {\n//                 articleData: action.data\n//             }\n//         };\n//     }\n//     return state;\n// }\n\nfunction reducer(state = initialState, action) {\n    const returnState = {};\n    Object.keys(allState).forEach(rer => {\n        console.log(rer, action.type);\n        if (action.type === rer) {\n            returnState = allState[rer]()['data']\n        }\n    })\n    console.log(returnState);\n    // if (action.type === 'handleLabelPage') {\n    //     return {\n    //         labelPage: Number(action.labelPage)\n    //     };\n    // }\n\n    // if (action.type === 'testHandle') {\n    //     return {\n    //         indexPage: {\n    //             articleData: action.data\n    //         }\n    //     };\n    // }\n\n    return returnState;\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}