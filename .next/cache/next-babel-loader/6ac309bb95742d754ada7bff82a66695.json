{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nvar initialState = {\n  labelPage: 0,\n  indexPage: {\n    articleData: {}\n  }\n};\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'handleLabelPage') {\n    return {\n      labelPage: Number(action.labelPage)\n    };\n  }\n\n  if (action.type === 'testHandle') {\n    return {\n      indexPage: {\n        articleData: action\n      }\n    };\n  }\n\n  return state;\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  var store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","initialState","labelPage","indexPage","articleData","reducer","state","action","type","Number","initializeStore","store","Object","assign"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,CADM;AAEjBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,WAAW,EAAE;AADN;AAFM,CAArB;;AAOA,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AAC3C,MAAIA,MAAM,CAACC,IAAP,KAAgB,iBAApB,EAAuC;AACnC,WAAO;AACHN,MAAAA,SAAS,EAAEO,MAAM,CAACF,MAAM,CAACL,SAAR;AADd,KAAP;AAGH;;AACD,MAAIK,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAC9B,WAAO;AACHL,MAAAA,SAAS,EAAE;AACPC,QAAAA,WAAW,EAAEG;AADN;AADR,KAAP;AAKH;;AACD,SAAOD,KAAP;AACH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASI,eAAT,CAAyBJ,KAAzB,EAAgC;AAE3C,MAAMK,KAAK,GAAGd,WAAW,CACrBQ,OADqB,EAErBO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,YAAlB,EAAgCK,KAAhC,CAFqB,EAGrBR,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOY,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\n\nconst initialState = {\n    labelPage: 0,\n    indexPage: {\n        articleData: {}\n    }\n};\n\nfunction reducer(state = initialState, action) {\n    if (action.type === 'handleLabelPage') {\n        return {\n            labelPage: Number(action.labelPage)\n        };\n    }\n    if (action.type === 'testHandle') {\n        return {\n            indexPage: {\n                articleData: action\n            }\n        };\n    }\n    return state;\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}