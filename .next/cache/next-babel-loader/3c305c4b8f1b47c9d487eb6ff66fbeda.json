{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nconst initialState = {\n  labelPage: '1'\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"handleLabelPage\":\n      console.log(action, 'actionaction');\n      return {\n        labelPage: state.labelPage\n      };\n      break;\n\n    default:\n      return state;\n  }\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  const store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","initialState","labelPage","reducer","state","action","type","console","log","initializeStore","store","Object","assign"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE;AADM,CAArB;;AAIA,SAASC,OAAT,CAAiBC,KAAK,GAAGH,YAAzB,EAAuCI,MAAvC,EAA+C;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,iBAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ,EAAoB,cAApB;AACA,aAAO;AACHH,QAAAA,SAAS,EAAEE,KAAK,CAACF;AADd,OAAP;AAGJ;;AACA;AACA,aAAOE,KAAP;AARJ;AAUH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASK,eAAT,CAAyBL,KAAzB,EAAgC;AAE3C,QAAMM,KAAK,GAAGZ,WAAW,CACrBK,OADqB,EAErBQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,YAAlB,EAAgCG,KAAhC,CAFqB,EAGrBL,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOU,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\n\nconst initialState = {\n    labelPage: '1'\n};\n\nfunction reducer(state = initialState, action) {\n    switch (action.type) {\n        case \"handleLabelPage\":\n            console.log(action, 'actionaction');\n            return {\n                labelPage: state.labelPage\n            };\n        break;\n        default:\n        return state;\n    }\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}