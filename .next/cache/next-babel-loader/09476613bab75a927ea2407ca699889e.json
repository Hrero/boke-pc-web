{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\n\nconst initialState = _objectSpread({\n  header_label_integer: 0\n}, indexState); // const indexState = {\n//     index_article_List: {}\n// }\n\n\nconst obj = {\n  \"index_article_List\": () => {\n    return {\n      index_article_List: action.data\n    };\n  }\n};\n\nfunction reducer(state = initialState, action) {\n  return handle(state, action);\n\n  function handle(state, action) {\n    if (action.type === 'header_label_integer') {\n      return {\n        header_label_integer: Number(action.code)\n      };\n    }\n\n    if (action.type === 'index_article_List') {\n      return {\n        index_article_List: action.data\n      };\n    }\n\n    return state;\n  }\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  const store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","initialState","header_label_integer","obj","index_article_List","action","data","reducer","state","handle","type","Number","code","initializeStore","store","Object","assign"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;;AAEA,MAAMC,YAAY;AACdC,EAAAA,oBAAoB,EAAE;AADR,GAEXF,UAFW,CAAlB,C,CAKA;AACA;AACA;;;AAEA,MAAMG,GAAG,GAAG;AACR,wBAAsB,MAAM;AACxB,WAAO;AACHC,MAAAA,kBAAkB,EAAEC,MAAM,CAACC;AADxB,KAAP;AAGH;AALO,CAAZ;;AAQA,SAASC,OAAT,CAAiBC,KAAK,GAAGP,YAAzB,EAAuCI,MAAvC,EAA+C;AAE3C,SAAOI,MAAM,CAACD,KAAD,EAAQH,MAAR,CAAb;;AAEA,WAASI,MAAT,CAAgBD,KAAhB,EAAuBH,MAAvB,EAA+B;AAE3B,QAAIA,MAAM,CAACK,IAAP,KAAgB,sBAApB,EAA4C;AACxC,aAAO;AACHR,QAAAA,oBAAoB,EAAES,MAAM,CAACN,MAAM,CAACO,IAAR;AADzB,OAAP;AAGH;;AACD,QAAIP,MAAM,CAACK,IAAP,KAAgB,oBAApB,EAA0C;AACtC,aAAO;AACHN,QAAAA,kBAAkB,EAAEC,MAAM,CAACC;AADxB,OAAP;AAGH;;AACD,WAAOE,KAAP;AACH;AACJ,C,CAED;AACA;AACA;;;AACA,eAAe,SAASK,eAAT,CAAyBL,KAAzB,EAAgC;AAE3C,QAAMM,KAAK,GAAGjB,WAAW,CACrBU,OADqB,EAErBQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,YAAlB,EAAgCO,KAAhC,CAFqB,EAGrBV,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOe,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\n\nconst initialState = {\n    header_label_integer: 0,\n    ...indexState\n};\n\n// const indexState = {\n//     index_article_List: {}\n// }\n\nconst obj = {\n    \"index_article_List\": () => {\n        return {\n            index_article_List: action.data\n        };\n    }\n}\n\nfunction reducer(state = initialState, action) {\n\n    return handle(state, action)\n\n    function handle(state, action) {\n\n        if (action.type === 'header_label_integer') {\n            return {\n                header_label_integer: Number(action.code)\n            };\n        }\n        if (action.type === 'index_article_List') {\n            return {\n                index_article_List: action.data\n            };\n        }\n        return state;\n    }\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}