{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport http from '../http';\nconst initialState = {\n  labelPage: 0,\n  articleList: {\n    data: {\n      list: []\n    }\n  }\n};\n\nconst reducer = async (state = initialState, action) => {\n  switch (action.type) {\n    case \"handleLabelPage\":\n      return {\n        labelPage: Number(action.labelPage)\n      };\n\n    case \"getArticleList\":\n      const data = await http({\n        url: '/article/getArticleList',\n        method: 'post',\n        params: action.params\n      });\n      return {\n        articleList: data\n      };\n      break;\n\n    default:\n      return state;\n  }\n}; // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  const store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","http","initialState","labelPage","articleList","data","list","reducer","state","action","type","Number","url","method","params","initializeStore","store","Object","assign"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,CADM;AAEjBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAE;AADJ;AADG;AAFI,CAArB;;AASA,MAAMC,OAAO,GAAG,OAAOC,KAAK,GAAGN,YAAf,EAA6BO,MAA7B,KAAwC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,iBAAL;AACI,aAAO;AACHP,QAAAA,SAAS,EAAEQ,MAAM,CAACF,MAAM,CAACN,SAAR;AADd,OAAP;;AAGJ,SAAK,gBAAL;AACI,YAAME,IAAI,GAAG,MAAMJ,IAAI,CAAC;AAAEW,QAAAA,GAAG,EAAE,yBAAP;AAAkCC,QAAAA,MAAM,EAAE,MAA1C;AAAmDC,QAAAA,MAAM,EAAEL,MAAM,CAACK;AAAlE,OAAD,CAAvB;AACA,aAAO;AACHV,QAAAA,WAAW,EAAEC;AADV,OAAP;AAGJ;;AACA;AACA,aAAOG,KAAP;AAZJ;AAcH,CAfD,C,CAiBA;AACA;AACA;;;AACA,eAAe,SAASO,eAAT,CAAyBP,KAAzB,EAAgC;AAE3C,QAAMQ,KAAK,GAAGlB,WAAW,CACrBS,OADqB,EAErBU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,YAAlB,EAAgCM,KAAhC,CAFqB,EAGrBT,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOgB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport http from '../http';\n\nconst initialState = {\n    labelPage: 0,\n    articleList: {\n        data: {\n            list: []\n        }\n    }\n};\n\nconst reducer = async (state = initialState, action) => {\n    switch (action.type) {\n        case \"handleLabelPage\": \n            return {\n                labelPage: Number(action.labelPage)\n            };\n        case \"getArticleList\":\n            const data = await http({ url: '/article/getArticleList', method: 'post' , params: action.params})\n            return {\n                articleList: data\n            }\n        break;\n        default:\n        return state;\n    }\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}