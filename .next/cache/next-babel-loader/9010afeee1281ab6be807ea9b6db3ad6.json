{"ast":null,"code":"import _Tree from \"antd/lib/tree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/app/code/boke-pc-web/components/others/ArticleTrees.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport styles from '../../styles/articleTrees.module.scss';\nimport { isEmpty } from 'zgl-utils-js';\nimport React, { useState } from 'react';\nimport httpAgent from '../../httpAgent';\nimport { useRouter } from 'next/router';\nconst {\n  DirectoryTree\n} = _Tree;\nexport default function ArticleTrees({\n  com_class_list,\n  user_ip\n}) {\n  const com_classList = !isEmpty(com_class_list) && com_class_list.map(item => {\n    if (item.isLeaf) {\n      return {\n        title: item.name,\n        key: item.value\n      };\n    } else {\n      return {\n        title: item.name,\n        key: item.value,\n        children: getItemChild(item.children)\n      };\n    }\n  });\n  const {\n    0: treeData,\n    1: setTreeData\n  } = useState(com_classList);\n  const router = useRouter();\n\n  function getItemChild(item) {\n    return item.map(child => {\n      if (child.isLeaf) {\n        return {\n          title: child.name,\n          key: child.value\n        };\n      } else {\n        return {\n          title: child.name,\n          key: child.value,\n          children: getItemChild(child.children)\n        };\n      }\n    });\n  }\n\n  function updateTreeData(list, key, children) {\n    return list.map(node => {\n      if (node.key === key) {\n        return _objectSpread(_objectSpread({}, node), {}, {\n          children\n        });\n      } else if (node.children) {\n        return _objectSpread(_objectSpread({}, node), {}, {\n          children: updateTreeData(node.children, key, children)\n        });\n      }\n\n      return node;\n    });\n  }\n\n  function onSelect(keys, event) {\n    if (keys) {\n      router.push('/infos/' + keys[0]);\n    }\n  }\n\n  ;\n\n  function onExpand() {\n    console.log('Trigger Expand');\n  }\n\n  ;\n\n  function onLoadData({\n    key,\n    children\n  }) {\n    return new Promise(resolve => {\n      if (children) {\n        resolve();\n        return;\n      }\n\n      const params = {\n        articleId: key,\n        // 文章id\n        ip: user_ip\n      };\n      httpAgent({\n        url: '/article/getArticleList',\n        method: 'post',\n        params\n      }).then(res => {\n        if (res.code == 0) {\n          setTreeData(origin => updateTreeData(origin, key, res.data.list.map(item => ({\n            title: item.title,\n            key: item.id,\n            isLeaf: true\n          }))));\n          resolve();\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.trees,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.visitorTitle,\n      children: \"\\u5206\\u7C7B\\u5217\\u8868\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DirectoryTree, {\n      multiple: true,\n      loadData: onLoadData,\n      onSelect: onSelect,\n      onExpand: onExpand,\n      treeData: treeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/components/others/ArticleTrees.js"],"names":["styles","isEmpty","React","useState","httpAgent","useRouter","DirectoryTree","ArticleTrees","com_class_list","user_ip","com_classList","map","item","isLeaf","title","name","key","value","children","getItemChild","treeData","setTreeData","router","child","updateTreeData","list","node","onSelect","keys","event","push","onExpand","console","log","onLoadData","Promise","resolve","params","articleId","ip","url","method","then","res","code","origin","data","id","trees","visitorTitle"],"mappings":"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","sourcesContent":["import styles from '../../styles/articleTrees.module.scss';\nimport { Tree } from 'antd';\nimport { isEmpty } from 'zgl-utils-js';\nimport React, { useState } from 'react';\nimport httpAgent from '../../httpAgent';\nimport { useRouter } from 'next/router'\n\n\nconst { DirectoryTree } = Tree;\n\nexport default function ArticleTrees ({com_class_list, user_ip}) {\n\n    const  com_classList = !isEmpty(com_class_list) && com_class_list.map(item => {\n         if (item.isLeaf) {\n             return {\n                 title: item.name,\n                 key: item.value\n             }\n         } else {\n             return {\n                 title: item.name,\n                 key: item.value,\n                 children: getItemChild(item.children)\n             }\n         }\n    })\n    const [treeData, setTreeData] = useState(com_classList)\n    const router = useRouter()\n\n    function getItemChild(item) {\n        return item.map(child => {\n            if (child.isLeaf) {\n                return {\n                    title: child.name,\n                    key: child.value\n                }\n            } else {\n                return {\n                    title: child.name,\n                    key: child.value,\n                    children: getItemChild(child.children)\n                }\n            }\n        })\n    }\n    function updateTreeData (list, key, children) {\n        return list.map((node) => {\n          if (node.key === key) {\n            return { ...node, children };\n          } else if (node.children) {\n            return { ...node, children: updateTreeData(node.children, key, children) };\n          }\n      \n          return node;\n        });\n    }\n    function onSelect(keys, event) {\n        if (keys) {\n            router.push('/infos/' + keys[0])\n        }\n    };\n    \n    function onExpand() {\n        console.log('Trigger Expand');\n    };\n    function onLoadData({ key, children }) {\n        return new Promise((resolve) => {\n            if (children) {\n                resolve();\n                return;\n            }\n            const params = {\n                articleId: key, // 文章id\n                ip: user_ip\n            }\n            httpAgent({url: '/article/getArticleList', method: 'post' , params}).then(res => {\n                if (res.code == 0) {\n                    setTreeData((origin) =>\n                        updateTreeData(origin, key, res.data.list.map(item => ({\n                            title: item.title,\n                            key: item.id,\n                            isLeaf: true\n                        })))\n                    );\n                    resolve();\n                }\n            })\n        });\n    }\n\n     \n    return (\n        <div className={styles.trees}>\n            <div className={styles.visitorTitle}> \n                分类列表 \n            </div>\n            <DirectoryTree\n                multiple\n                loadData={onLoadData}\n                onSelect={onSelect}\n                onExpand={onExpand}\n                treeData={treeData}\n            />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}