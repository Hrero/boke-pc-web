{"ast":null,"code":"import _defineProperty from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nvar allState = Object.assign(indexState, postState, comState);\nvar initialState = Object.keys(allState).map(function (key) {\n  return _defineProperty({}, key, allState[key]()['default']);\n}); // function reducer(state = initialState, action) {\n//     let backState = null;\n//     Object.keys(allState).forEach(item => {\n//         const fn = allState[item](action);\n//         if (action.type === fn['type']) {\n//             backState = fn['data'];\n//         }\n//     })\n//     return backState? backState: state;\n// }\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\nexport default function initializeStore(state) {\n  var store = createStore(function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    var backState = null;\n    Object.keys(allState).forEach(function (item) {\n      var fn = allState[item](action);\n\n      if (action.type === fn['type']) {\n        backState = fn['data'];\n      }\n    });\n    return backState ? backState : state;\n  }, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","allState","Object","assign","initialState","keys","map","key","initializeStore","state","store","action","backState","forEach","item","fn","type"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,CAAjB;AAEA,IAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,UAAAC,GAAG,EAAI;AAClD,6BACKA,GADL,EACWN,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB,CADX;AAGH,CAJoB,CAArB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC3C,MAAMC,KAAK,GAAGf,WAAW,CACrB,YAAkC;AAAA,QAAjCc,KAAiC,uEAAzBL,YAAyB;AAAA,QAAXO,MAAW;AAC9B,QAAIC,SAAS,GAAG,IAAhB;AACAV,IAAAA,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBY,OAAtB,CAA8B,UAAAC,IAAI,EAAI;AAClC,UAAMC,EAAE,GAAGd,QAAQ,CAACa,IAAD,CAAR,CAAeH,MAAf,CAAX;;AACA,UAAIA,MAAM,CAACK,IAAP,KAAgBD,EAAE,CAAC,MAAD,CAAtB,EAAgC;AAC5BH,QAAAA,SAAS,GAAGG,EAAE,CAAC,MAAD,CAAd;AACH;AACJ,KALD;AAMA,WAAOH,SAAS,GAAEA,SAAF,GAAaH,KAA7B;AACH,GAVoB,EAWrBP,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCK,KAAhC,CAXqB,EAYrBb,eAAe,CAACC,UAAD,CAZM,CAAzB;AAcA,SAAOa,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\n\nconst allState = Object.assign(indexState, postState, comState);\n\nconst initialState = Object.keys(allState).map(key => {\n    return {\n        [key]: allState[key]()['default']\n    }\n})\n\n// function reducer(state = initialState, action) {\n//     let backState = null;\n//     Object.keys(allState).forEach(item => {\n//         const fn = allState[item](action);\n//         if (action.type === fn['type']) {\n//             backState = fn['data'];\n//         }\n//     })\n//     return backState? backState: state;\n// }\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n    const store = createStore(\n        (state = initialState, action) => {\n            let backState = null;\n            Object.keys(allState).forEach(item => {\n                const fn = allState[item](action);\n                if (action.type === fn['type']) {\n                    backState = fn['data'];\n                }\n            })\n            return backState? backState: state;\n        },\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}