{"ast":null,"code":"import _defineProperty from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nvar allState = Object.assign(indexState, postState, comState);\nvar initialState = Object.keys(allState).map(function (key) {\n  console.log(_defineProperty({}, key, allState[key]()['default']), '======');\n  return _defineProperty({}, key, allState[key]()['default']);\n});\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var backState = null;\n  Object.keys(allState).forEach(function (item) {\n    var fn = allState[item](action);\n\n    if (action.type === fn['type']) {\n      if (action.type === 'indexMessageList') {\n        console.log(fn['data']);\n      }\n\n      backState = fn['data'];\n    }\n  });\n  return backState ? backState : state;\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  var store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","allState","Object","assign","initialState","keys","map","key","console","log","reducer","state","action","backState","forEach","item","fn","type","initializeStore","store"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,CAAjB;AAEA,IAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,UAAAC,GAAG,EAAI;AAClDC,EAAAA,OAAO,CAACC,GAAR,qBACKF,GADL,EACWN,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB,CADX,GAEG,QAFH;AAGA,6BACKA,GADL,EACWN,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB,CADX;AAGH,CAPoB,CAArB;;AASA,SAASG,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBP,YAAsB;AAAA,MAARQ,MAAQ;AAC3C,MAAIC,SAAS,GAAG,IAAhB;AACAX,EAAAA,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBa,OAAtB,CAA8B,UAAAC,IAAI,EAAI;AAClC,QAAMC,EAAE,GAAGf,QAAQ,CAACc,IAAD,CAAR,CAAeH,MAAf,CAAX;;AACA,QAAIA,MAAM,CAACK,IAAP,KAAgBD,EAAE,CAAC,MAAD,CAAtB,EAAgC;AAC5B,UAAIJ,MAAM,CAACK,IAAP,KAAgB,kBAApB,EAAwC;AACpCT,QAAAA,OAAO,CAACC,GAAR,CAAYO,EAAE,CAAC,MAAD,CAAd;AACH;;AACDH,MAAAA,SAAS,GAAGG,EAAE,CAAC,MAAD,CAAd;AACH;AACJ,GARD;AASA,SAAOH,SAAS,GAAEA,SAAF,GAAaF,KAA7B;AACH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASO,eAAT,CAAyBP,KAAzB,EAAgC;AAE3C,MAAMQ,KAAK,GAAGxB,WAAW,CACrBe,OADqB,EAErBR,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCO,KAAhC,CAFqB,EAGrBf,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOsB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\n\nconst allState = Object.assign(indexState, postState, comState);\n\nconst initialState = Object.keys(allState).map(key => {\n    console.log({\n        [key]: allState[key]()['default']\n    }, '======');\n    return {\n        [key]: allState[key]()['default']\n    }\n})\n\nfunction reducer(state = initialState, action) {\n    let backState = null;\n    Object.keys(allState).forEach(item => {\n        const fn = allState[item](action);\n        if (action.type === fn['type']) {\n            if (action.type === 'indexMessageList') {\n                console.log(fn['data']);\n            }\n            backState = fn['data'];\n        }\n    })\n    return backState? backState: state;\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}