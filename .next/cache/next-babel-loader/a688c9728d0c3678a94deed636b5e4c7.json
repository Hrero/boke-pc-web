{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nimport infoState from '../store/info';\nconst allState = Object.assign(indexState, postState, comState, infoState);\nconst initialState = Object.keys(allState).map(key => {\n  return {\n    [key]: allState[key]()['default']\n  };\n}).reduce((sum, cur) => {\n  return Object.assign(sum, cur, {});\n}); // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\nexport default function initializeStore(state) {\n  const store = createStore((state = initialState, action) => {\n    let backState = null;\n    Object.keys(allState).forEach(item => {\n      const fn = allState[item](action);\n\n      if (action.type === fn['type']) {\n        backState = fn['data'];\n        console.log(backState);\n      }\n    }); // console.log(action.type, state, backState);\n\n    return Object.assign({}, initialState, state); // return backState? backState: state;\n  }, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","infoState","allState","Object","assign","initialState","keys","map","key","reduce","sum","cur","initializeStore","state","store","action","backState","forEach","item","fn","type","console","log"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcN,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+CC,SAA/C,CAAjB;AAEA,MAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0BC,GAAG,IAAI;AAClD,SAAO;AACH,KAACA,GAAD,GAAON,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB;AADJ,GAAP;AAGH,CAJoB,EAIlBC,MAJkB,CAIX,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpB,SAAOR,MAAM,CAACC,MAAP,CAAcM,GAAd,EAAmBC,GAAnB,EAAwB,EAAxB,CAAP;AACH,CANoB,CAArB,C,CAOA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC3C,QAAMC,KAAK,GAAGnB,WAAW,CACrB,CAACkB,KAAK,GAAGR,YAAT,EAAuBU,MAAvB,KAAkC;AAC9B,QAAIC,SAAS,GAAG,IAAhB;AACAb,IAAAA,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBe,OAAtB,CAA8BC,IAAI,IAAI;AAClC,YAAMC,EAAE,GAAGjB,QAAQ,CAACgB,IAAD,CAAR,CAAeH,MAAf,CAAX;;AACA,UAAIA,MAAM,CAACK,IAAP,KAAgBD,EAAE,CAAC,MAAD,CAAtB,EAAgC;AAC5BH,QAAAA,SAAS,GAAGG,EAAE,CAAC,MAAD,CAAd;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACH;AACJ,KAND,EAF8B,CAS9B;;AAEA,WAAOb,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCQ,KAAhC,CAAP,CAX8B,CAY9B;AACH,GAdoB,EAerBV,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCQ,KAAhC,CAfqB,EAgBrBjB,eAAe,CAACC,UAAD,CAhBM,CAAzB;AAkBA,SAAOiB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nimport infoState from '../store/info';\n\nconst allState = Object.assign(indexState, postState, comState, infoState);\n\nconst initialState = Object.keys(allState).map(key => {\n    return {\n        [key]: allState[key]()['default']\n    }\n}).reduce((sum, cur) => {\n    return Object.assign(sum, cur, {})\n})\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n    const store = createStore(\n        (state = initialState, action) => {\n            let backState = null;\n            Object.keys(allState).forEach(item => {\n                const fn = allState[item](action);\n                if (action.type === fn['type']) {\n                    backState = fn['data'];\n                    console.log(backState);\n                }\n            })\n            // console.log(action.type, state, backState);\n            \n            return Object.assign({}, initialState, state);\n            // return backState? backState: state;\n        },\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}