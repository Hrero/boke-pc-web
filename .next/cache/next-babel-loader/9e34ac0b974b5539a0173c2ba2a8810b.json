{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nimport infoState from '../store/info';\nconst allState = Object.assign(indexState, postState, comState, infoState); // const initialState = Object.keys(allState).map(key => {\n//     return {\n//         [key]: allState[key]()['default']\n//     }\n// })\n\nconst initialState = Object.keys(allState).reduce((sum, cur) => {\n  return Object.assign(sum, {\n    [key]: allState[key]()['default']\n  });\n});\nconsole.log(initialState, 'initialState'); // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\nexport default function initializeStore(state) {\n  const store = createStore((state = initialState, action) => {\n    let backState = null;\n    Object.keys(allState).forEach(item => {\n      const fn = allState[item](action);\n\n      if (action.type === fn['type']) {\n        backState = fn['data'];\n      }\n    });\n    return backState ? backState : state;\n  }, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","infoState","allState","Object","assign","initialState","keys","reduce","sum","cur","key","console","log","initializeStore","state","store","action","backState","forEach","item","fn","type"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcN,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+CC,SAA/C,CAAjB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,MAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,MAAtB,CAA6B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5D,SAAON,MAAM,CAACC,MAAP,CAAcI,GAAd,EAAmB;AACtB,KAACE,GAAD,GAAOR,QAAQ,CAACQ,GAAD,CAAR,GAAgB,SAAhB;AADe,GAAnB,CAAP;AAGH,CAJoB,CAArB;AAKAC,OAAO,CAACC,GAAR,CAAYP,YAAZ,EAA0B,cAA1B,E,CACA;AACA;AACA;;AACA,eAAe,SAASQ,eAAT,CAAyBC,KAAzB,EAAgC;AAC3C,QAAMC,KAAK,GAAGpB,WAAW,CACrB,CAACmB,KAAK,GAAGT,YAAT,EAAuBW,MAAvB,KAAkC;AAC9B,QAAIC,SAAS,GAAG,IAAhB;AACAd,IAAAA,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBgB,OAAtB,CAA8BC,IAAI,IAAI;AAClC,YAAMC,EAAE,GAAGlB,QAAQ,CAACiB,IAAD,CAAR,CAAeH,MAAf,CAAX;;AACA,UAAIA,MAAM,CAACK,IAAP,KAAgBD,EAAE,CAAC,MAAD,CAAtB,EAAgC;AAC5BH,QAAAA,SAAS,GAAGG,EAAE,CAAC,MAAD,CAAd;AACH;AACJ,KALD;AAMA,WAAOH,SAAS,GAAEA,SAAF,GAAaH,KAA7B;AACH,GAVoB,EAWrBX,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCS,KAAhC,CAXqB,EAYrBlB,eAAe,CAACC,UAAD,CAZM,CAAzB;AAcA,SAAOkB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nimport infoState from '../store/info';\n\nconst allState = Object.assign(indexState, postState, comState, infoState);\n\n// const initialState = Object.keys(allState).map(key => {\n//     return {\n//         [key]: allState[key]()['default']\n//     }\n// })\nconst initialState = Object.keys(allState).reduce((sum, cur) => {\n    return Object.assign(sum, {\n        [key]: allState[key]()['default']\n    })\n})\nconsole.log(initialState, 'initialState');\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n    const store = createStore(\n        (state = initialState, action) => {\n            let backState = null;\n            Object.keys(allState).forEach(item => {\n                const fn = allState[item](action);\n                if (action.type === fn['type']) {\n                    backState = fn['data'];\n                }\n            })\n            return backState? backState: state;\n        },\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}