{"ast":null,"code":"import _regeneratorRuntime from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nvar initialState = {\n  labelPage: 0,\n  articleList: null\n};\n\nvar reducer = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var state,\n        action,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            state = _args.length > 0 && _args[0] !== undefined ? _args[0] : initialState;\n            action = _args.length > 1 ? _args[1] : undefined;\n            _context.t0 = action.type;\n            _context.next = _context.t0 === \"handleLabelPage\" ? 5 : _context.t0 === \"getArticleList\" ? 6 : 11;\n            break;\n\n          case 5:\n            return _context.abrupt(\"return\", {\n              labelPage: Number(action.labelPage)\n            });\n\n          case 6:\n            _context.next = 8;\n            return http({\n              url: '/article/getArticleList',\n              method: 'post',\n              params: {\n                pageSize: 100,\n                pageNum: 1\n              }\n            });\n\n          case 8:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              articleList: data.data\n            });\n\n          case 11:\n            return _context.abrupt(\"return\", state);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function reducer() {\n    return _ref.apply(this, arguments);\n  };\n}(); // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  var store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","initialState","labelPage","articleList","reducer","state","action","type","Number","http","url","method","params","pageSize","pageNum","data","initializeStore","store","Object","assign"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,CADM;AAEjBC,EAAAA,WAAW,EAAE;AAFI,CAArB;;AAKA,IAAMC,OAAO;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,YAAAA,KAAP,2DAAeJ,YAAf;AAA6BK,YAAAA,MAA7B;AAAA,0BACJA,MAAM,CAACC,IADH;AAAA,4CAEH,iBAFG,uBAMH,gBANG;AAAA;;AAAA;AAAA,6CAGG;AACHL,cAAAA,SAAS,EAAEM,MAAM,CAACF,MAAM,CAACJ,SAAR;AADd,aAHH;;AAAA;AAAA;AAAA,mBAOeO,IAAI,CAAC;AAAEC,cAAAA,GAAG,EAAE,yBAAP;AAAkCC,cAAAA,MAAM,EAAE,MAA1C;AAAmDC,cAAAA,MAAM,EAAE;AAC/EC,gBAAAA,QAAQ,EAAE,GADqE;AAE/EC,gBAAAA,OAAO,EAAE;AAFsE;AAA3D,aAAD,CAPnB;;AAAA;AAOEC,YAAAA,IAPF;AAAA,6CAWG;AACHZ,cAAAA,WAAW,EAAEY,IAAI,CAACA;AADf,aAXH;;AAAA;AAAA,6CAgBDV,KAhBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPD,OAAO;AAAA;AAAA;AAAA,GAAb,C,CAoBA;AACA;AACA;;;AACA,eAAe,SAASY,eAAT,CAAyBX,KAAzB,EAAgC;AAE3C,MAAMY,KAAK,GAAGnB,WAAW,CACrBM,OADqB,EAErBc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlB,YAAlB,EAAgCI,KAAhC,CAFqB,EAGrBN,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOiB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\n\nconst initialState = {\n    labelPage: 0,\n    articleList: null\n};\n\nconst reducer = async (state = initialState, action) => {\n    switch (action.type) {\n        case \"handleLabelPage\": \n            return {\n                labelPage: Number(action.labelPage)\n            };\n        case \"getArticleList\":\n            const data = await http({ url: '/article/getArticleList', method: 'post' , params: {\n                pageSize: 100,\n                pageNum: 1\n            }})\n            return {\n                articleList: data.data\n            }\n        break;\n        default:\n        return state;\n    }\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}