{"ast":null,"code":"import _defineProperty from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nvar allState = Object.assign(indexState, postState, comState);\nvar initialState = Object.keys(allState).map(function (key) {\n  return _defineProperty({}, key, allState[key]()['default']);\n});\nconsole.log(initialState1); // const initialState = {\n//     labelPage: 0,\n//     indexPage: {\n//         articleData: {}\n//     }\n// };\n\nfunction reduxHandle(_ref2, fn) {\n  var type = _ref2.type,\n      action = _ref2.action;\n  return fn();\n}\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'handleLabelPage') {\n    return {\n      labelPage: Number(action.labelPage)\n    };\n  }\n\n  if (action.type === 'testHandle') {\n    return {\n      indexPage: {\n        articleData: action\n      }\n    };\n  }\n\n  return state;\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  var store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","allState","Object","assign","initialState","keys","map","key","console","log","initialState1","reduxHandle","fn","type","action","reducer","state","labelPage","Number","indexPage","articleData","initializeStore","store"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,CAAjB;AACA,IAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,UAAAC,GAAG,EAAI;AAClD,6BACKA,GADL,EACWN,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB,CADX;AAGH,CAJoB,CAArB;AAKAC,OAAO,CAACC,GAAR,CAAYC,aAAZ,E,CACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAT,QAAuCC,EAAvC,EAA2C;AAAA,MAApBC,IAAoB,SAApBA,IAAoB;AAAA,MAAdC,MAAc,SAAdA,MAAc;AAEvC,SAAOF,EAAE,EAAT;AACH;;AAED,SAASG,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBZ,YAAsB;AAAA,MAARU,MAAQ;;AAE3C,MAAIA,MAAM,CAACD,IAAP,KAAgB,iBAApB,EAAuC;AACnC,WAAO;AACHI,MAAAA,SAAS,EAAEC,MAAM,CAACJ,MAAM,CAACG,SAAR;AADd,KAAP;AAGH;;AAED,MAAIH,MAAM,CAACD,IAAP,KAAgB,YAApB,EAAkC;AAC9B,WAAO;AACHM,MAAAA,SAAS,EAAE;AACPC,QAAAA,WAAW,EAAEN;AADN;AADR,KAAP;AAKH;;AAED,SAAOE,KAAP;AACH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASK,eAAT,CAAyBL,KAAzB,EAAgC;AAE3C,MAAMM,KAAK,GAAG3B,WAAW,CACrBoB,OADqB,EAErBb,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCY,KAAhC,CAFqB,EAGrBpB,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOyB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\n\nconst allState = Object.assign(indexState, postState, comState);\nconst initialState = Object.keys(allState).map(key => {\n    return {\n        [key]: allState[key]()['default']\n    }\n})\nconsole.log(initialState1);\n// const initialState = {\n//     labelPage: 0,\n//     indexPage: {\n//         articleData: {}\n//     }\n// };\n\nfunction reduxHandle({ type, action }, fn) {\n\n    return fn()\n}\n\nfunction reducer(state = initialState, action) {\n    \n    if (action.type === 'handleLabelPage') {\n        return {\n            labelPage: Number(action.labelPage)\n        };\n    }\n\n    if (action.type === 'testHandle') {\n        return {\n            indexPage: {\n                articleData: action\n            }\n        };\n    }\n\n    return state;\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}