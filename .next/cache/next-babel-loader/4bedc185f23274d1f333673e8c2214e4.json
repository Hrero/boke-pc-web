{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nconst allState = Object.assign(indexState, postState, comState);\nconst initialState = Object.keys(allState).map(key => {\n  return {\n    [key]: allState[key]()['default']\n  };\n});\n\nfunction reducer(state = initialState, action) {\n  // const reduxState = Object.keys(allState).map(key => {\n  //     // if (action.type === allState[key]()['type']) {\n  //     //     console.log(allState[key]()['type'], allState[key]()['data']);\n  //     //     return allState[key]()['data']\n  //     // }\n  //     if (action.type === 'handleLabelPage') {\n  //         return {\n  //             labelPage: Number(action.labelPage)\n  //         };\n  //     }\n  //     if (action.type === 'testHandle') {\n  //         return {\n  //             indexPage: {\n  //                 articleData: action.data\n  //             }\n  //         };\n  //     }\n  // })\n  // return reduxState;\n  return getA('handleLabelPage', action);\n\n  function getA(handleLabelPage, action) {\n    console.log(action, handleLabelPage, 111);\n\n    if (action.type === handleLabelPage) {\n      return {\n        labelPage: Number(action.labelPage)\n      };\n    }\n  } // if (action.type === 'handleLabelPage') {\n  //     return {\n  //         labelPage: Number(action.labelPage)\n  //     };\n  // }\n\n\n  if (action.type === 'testHandle') {\n    return {\n      indexPage: {\n        articleData: action.data\n      }\n    };\n  }\n\n  return state;\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  const store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","allState","Object","assign","initialState","keys","map","key","reducer","state","action","getA","handleLabelPage","console","log","type","labelPage","Number","indexPage","articleData","data","initializeStore","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,CAAjB;AAEA,MAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0BC,GAAG,IAAI;AAClD,SAAO;AACH,KAACA,GAAD,GAAON,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB;AADJ,GAAP;AAGH,CAJoB,CAArB;;AAMA,SAASC,OAAT,CAAiBC,KAAK,GAAGL,YAAzB,EAAuCM,MAAvC,EAA+C;AAE3C;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,SAAOC,IAAI,CAAC,iBAAD,EAAoBD,MAApB,CAAX;;AACA,WAASC,IAAT,CAAcC,eAAd,EAA+BF,MAA/B,EAAuC;AACnCG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBE,eAApB,EAAoC,GAApC;;AACA,QAAIF,MAAM,CAACK,IAAP,KAAgBH,eAApB,EAAqC;AACjC,aAAO;AACHI,QAAAA,SAAS,EAAEC,MAAM,CAACP,MAAM,CAACM,SAAR;AADd,OAAP;AAGH;AACJ,GAhC0C,CAiC3C;AACA;AACA;AACA;AACA;;;AAEA,MAAIN,MAAM,CAACK,IAAP,KAAgB,YAApB,EAAkC;AAC9B,WAAO;AACHG,MAAAA,SAAS,EAAE;AACPC,QAAAA,WAAW,EAAET,MAAM,CAACU;AADb;AADR,KAAP;AAKH;;AAED,SAAOX,KAAP;AACH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASY,eAAT,CAAyBZ,KAAzB,EAAgC;AAE3C,QAAMa,KAAK,GAAG3B,WAAW,CACrBa,OADqB,EAErBN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCK,KAAhC,CAFqB,EAGrBb,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOyB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\n\nconst allState = Object.assign(indexState, postState, comState);\n\nconst initialState = Object.keys(allState).map(key => {\n    return {\n        [key]: allState[key]()['default']\n    }\n})\n\nfunction reducer(state = initialState, action) {\n\n    // const reduxState = Object.keys(allState).map(key => {\n    //     // if (action.type === allState[key]()['type']) {\n    //     //     console.log(allState[key]()['type'], allState[key]()['data']);\n    //     //     return allState[key]()['data']\n    //     // }\n\n    //     if (action.type === 'handleLabelPage') {\n    //         return {\n    //             labelPage: Number(action.labelPage)\n    //         };\n    //     }\n    \n    //     if (action.type === 'testHandle') {\n    //         return {\n    //             indexPage: {\n    //                 articleData: action.data\n    //             }\n    //         };\n    //     }\n\n    // })\n    // return reduxState;\n    return getA('handleLabelPage', action)\n    function getA(handleLabelPage, action) {\n        console.log(action, handleLabelPage,111);\n        if (action.type === handleLabelPage) {\n            return {\n                labelPage: Number(action.labelPage)\n            };\n        }\n    }\n    // if (action.type === 'handleLabelPage') {\n    //     return {\n    //         labelPage: Number(action.labelPage)\n    //     };\n    // }\n\n    if (action.type === 'testHandle') {\n        return {\n            indexPage: {\n                articleData: action.data\n            }\n        };\n    }\n\n    return state;\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}