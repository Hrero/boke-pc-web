{"ast":null,"code":"import _defineProperty from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nvar allState = Object.assign(indexState, postState, comState);\nvar initialState = Object.keys(allState).map(function (key) {\n  return _defineProperty({}, key, allState[key]()['default']);\n});\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return state = Object.keys(allState).map(function (key) {\n    if (action.type === key) {\n      return {\n        labelPage: Number(action.labelPage)\n      };\n    } // getHandleState({action, type: key}, allState[key]())\n\n  });\n\n  function getHandleState(_ref2, fn) {\n    var action = _ref2.action,\n        type = _ref2.type;\n    console.log(action, type, fn);\n\n    if (action.type === type) {\n      return fn(); // return {\n      //     labelPage: Number(action.labelPage)\n      // };\n    }\n  }\n\n  if (action.type === 'handleLabelPage') {\n    return {\n      labelPage: Number(action.labelPage)\n    };\n  }\n\n  if (action.type === 'testHandle') {\n    return {\n      indexPage: {\n        articleData: action\n      }\n    };\n  }\n\n  return state;\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  var store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","allState","Object","assign","initialState","keys","map","key","reducer","state","action","type","labelPage","Number","getHandleState","fn","console","log","indexPage","articleData","initializeStore","store"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,CAAjB;AAEA,IAAMI,YAAY,GAAGF,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,UAAAC,GAAG,EAAI;AAClD,6BACKA,GADL,EACWN,QAAQ,CAACM,GAAD,CAAR,GAAgB,SAAhB,CADX;AAGH,CAJoB,CAArB;;AAMA,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;AAE3C,SAAOD,KAAK,GAAGP,MAAM,CAACG,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA0B,UAAAC,GAAG,EAAI;AAC5C,QAAIG,MAAM,CAACC,IAAP,KAAgBJ,GAApB,EAAyB;AACrB,aAAO;AACHK,QAAAA,SAAS,EAAEC,MAAM,CAACH,MAAM,CAACE,SAAR;AADd,OAAP;AAGH,KAL2C,CAM5C;;AACH,GAPc,CAAf;;AAUA,WAASE,cAAT,QAAwCC,EAAxC,EAA4C;AAAA,QAAnBL,MAAmB,SAAnBA,MAAmB;AAAA,QAAXC,IAAW,SAAXA,IAAW;AAChDK,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAAoBC,IAApB,EAA0BI,EAA1B;;AACQ,QAAIL,MAAM,CAACC,IAAP,KAAgBA,IAApB,EAA0B;AACtB,aAAOI,EAAE,EAAT,CADsB,CAEtB;AACA;AACA;AACH;AAEJ;;AAED,MAAIL,MAAM,CAACC,IAAP,KAAgB,iBAApB,EAAuC;AACnC,WAAO;AACHC,MAAAA,SAAS,EAAEC,MAAM,CAACH,MAAM,CAACE,SAAR;AADd,KAAP;AAGH;;AAED,MAAIF,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAC9B,WAAO;AACHO,MAAAA,SAAS,EAAE;AACPC,QAAAA,WAAW,EAAET;AADN;AADR,KAAP;AAKH;;AAED,SAAOD,KAAP;AACH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASW,eAAT,CAAyBX,KAAzB,EAAgC;AAE3C,MAAMY,KAAK,GAAG1B,WAAW,CACrBa,OADqB,EAErBN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCK,KAAhC,CAFqB,EAGrBb,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOwB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\n\nconst allState = Object.assign(indexState, postState, comState);\n\nconst initialState = Object.keys(allState).map(key => {\n    return {\n        [key]: allState[key]()['default']\n    }\n})\n\nfunction reducer(state = initialState, action) {\n\n    return state = Object.keys(allState).map(key => {\n        if (action.type === key) {\n            return {\n                labelPage: Number(action.labelPage)\n            };\n        }\n        // getHandleState({action, type: key}, allState[key]())\n    })\n\n\n    function getHandleState({action, type}, fn) {\nconsole.log(action, type, fn);\n        if (action.type === type) {\n            return fn()\n            // return {\n            //     labelPage: Number(action.labelPage)\n            // };\n        }\n\n    }\n\n    if (action.type === 'handleLabelPage') {\n        return {\n            labelPage: Number(action.labelPage)\n        };\n    }\n\n    if (action.type === 'testHandle') {\n        return {\n            indexPage: {\n                articleData: action\n            }\n        };\n    }\n\n    return state;\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}