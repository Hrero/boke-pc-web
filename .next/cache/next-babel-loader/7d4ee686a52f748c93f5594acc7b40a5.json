{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nvar initialState = {\n  labelPage: 0,\n  indexPage: {\n    articleData: {}\n  }\n};\n\nfunction reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"handleLabelPage\":\n      return {\n        labelPage: Number(action.labelPage)\n      };\n\n    case \"testHandle\":\n      return {\n        indexPage: {\n          articleData: action\n        }\n      };\n      break;\n\n    default:\n      return state;\n  }\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  var store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","initialState","labelPage","indexPage","articleData","reducer","state","action","type","Number","initializeStore","store","Object","assign"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,CADM;AAEjBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,WAAW,EAAE;AADN;AAFM,CAArB;;AAOA,SAASC,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,iBAAL;AACI,aAAO;AACHN,QAAAA,SAAS,EAAEO,MAAM,CAACF,MAAM,CAACL,SAAR;AADd,OAAP;;AAGJ,SAAK,YAAL;AACI,aAAO;AACHC,QAAAA,SAAS,EAAE;AACPC,UAAAA,WAAW,EAAEG;AADN;AADR,OAAP;AAKJ;;AACA;AACA,aAAOD,KAAP;AAbJ;AAeH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASI,eAAT,CAAyBJ,KAAzB,EAAgC;AAE3C,MAAMK,KAAK,GAAGb,WAAW,CACrBO,OADqB,EAErBO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,YAAlB,EAAgCK,KAAhC,CAFqB,EAGrBP,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOW,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\n\nconst initialState = {\n    labelPage: 0,\n    indexPage: {\n        articleData: {}\n    }\n};\n\nfunction reducer(state = initialState, action) {\n    switch (action.type) {\n        case \"handleLabelPage\":\n            return {\n                labelPage: Number(action.labelPage)\n            };\n        case \"testHandle\":\n            return {\n                indexPage: {\n                    articleData: action\n                }\n            };\n        break;\n        default:\n        return state;\n    }\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}