{"ast":null,"code":"import _regeneratorRuntime from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/app/code/boke-pc-web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/app/code/boke-pc-web/lib/with-redux-app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport initializeStore from \"../store/store\";\nvar isServer = false;\nvar __NEXT_REDUX_STORE__ = \"__NEXT_REDUX_STORE__\";\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    // 服务端每次执行都重新创建一个store\n    return initializeStore(initialState);\n  } // 在客户端执行这个方法的时候 优先返回window上已有的store\n  // 而不能每次执行都重新创建一个store 否则状态就无限重置了\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n\nexport default (function (Comp) {\n  var withReduxApp = /*#__PURE__*/function (_React$Component) {\n    _inherits(withReduxApp, _React$Component);\n\n    var _super = _createSuper(withReduxApp);\n\n    function withReduxApp(props) {\n      var _this;\n\n      _classCallCheck(this, withReduxApp);\n\n      _this = _super.call(this, props); // getInitialProps创建了store 这里为什么又重新创建一次？\n      // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\n      // redux里有很多方法 不适合序列化存储\n      // 所以选择在getInitialProps返回initialReduxState初始的状态\n      // 再在这里通过initialReduxState去创建一个完整的store\n\n      _this.reduxStore = getOrCreateStore(props.initialReduxState);\n      return _this;\n    }\n\n    _createClass(withReduxApp, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            Component = _this$props.Component,\n            pageProps = _this$props.pageProps,\n            rest = _objectWithoutProperties(_this$props, [\"Component\", \"pageProps\"]);\n\n        return /*#__PURE__*/_jsxDEV(Comp, _objectSpread(_objectSpread({}, rest), {}, {\n          Component: Component,\n          pageProps: pageProps,\n          reduxStore: this.reduxStore\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this);\n      }\n    }]);\n\n    return withReduxApp;\n  }(React.Component); // 这个其实是_app.js的getInitialProps\n  // 在服务端渲染和客户端路由跳转时会被执行\n  // 所以非常适合做redux-store的初始化\n\n\n  withReduxApp.getInitialProps = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n      var reduxStore, appProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              reduxStore = getOrCreateStore();\n              ctx.reduxStore = reduxStore;\n              appProps = {};\n\n              if (!(typeof Comp.getInitialProps === \"function\")) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return Comp.getInitialProps(ctx);\n\n            case 6:\n              appProps = _context.sent;\n\n            case 7:\n              return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, appProps), {}, {\n                initialReduxState: reduxStore.getState()\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withReduxApp;\n});","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/lib/with-redux-app.js"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window","Comp","withReduxApp","props","reduxStore","initialReduxState","Component","pageProps","rest","getInitialProps","ctx","appProps","getState"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA,IAAMC,QAAQ,QAAd;AACA,IAAMC,oBAAoB,GAAG,sBAA7B;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACpC,MAAIH,QAAJ,EAAc;AACV;AACA,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACH,GAJmC,CAKpC;AACA;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AAC/BG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACH;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACC;;AAED,gBAAe,UAACI,IAAD,EAAU;AAAA,MACnBC,YADmB;AAAA;;AAAA;;AAErB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACnB,gCAAMA,KAAN,EADmB,CAEnB;AACA;AACA;AACA;AACA;;AACA,YAAKC,UAAL,GAAkBN,gBAAgB,CAACK,KAAK,CAACE,iBAAP,CAAlC;AAPmB;AAQlB;;AAVoB;AAAA;AAAA,+BAYZ;AAAA,0BACiC,KAAKF,KADtC;AAAA,YACDG,SADC,eACDA,SADC;AAAA,YACUC,SADV,eACUA,SADV;AAAA,YACwBC,IADxB;;AAET,4BACI,QAAC,IAAD,kCACIA,IADJ;AAEA,UAAA,SAAS,EAAEF,SAFX;AAGA,UAAA,SAAS,EAAEC,SAHX;AAIA,UAAA,UAAU,EAAE,KAAKH;AAJjB;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQC;AAtBoB;;AAAA;AAAA,IACEV,KAAK,CAACY,SADR,GAyBzB;AACA;AACA;;;AACAJ,EAAAA,YAAY,CAACO,eAAb;AAAA,wEAA+B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBN,cAAAA,UADqB,GACRN,gBAAgB,EADR;AAE3BY,cAAAA,GAAG,CAACN,UAAJ,GAAiBA,UAAjB;AAEIO,cAAAA,QAJuB,GAIZ,EAJY;;AAAA,oBAKvB,OAAOV,IAAI,CAACQ,eAAZ,KAAgC,UALT;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMNR,IAAI,CAACQ,eAAL,CAAqBC,GAArB,CANM;;AAAA;AAMvBC,cAAAA,QANuB;;AAAA;AAAA,+EAUxBA,QAVwB;AAW3BN,gBAAAA,iBAAiB,EAAED,UAAU,CAACQ,QAAX;AAXQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAOV,YAAP;AACH,CA5CG","sourcesContent":["import React from \"react\";\nimport initializeStore from \"../store/store\";\n\nconst isServer = typeof window === \"undefined\";\nconst __NEXT_REDUX_STORE__ = \"__NEXT_REDUX_STORE__\";\n\nfunction getOrCreateStore(initialState) {\n    if (isServer) {\n        // 服务端每次执行都重新创建一个store\n        return initializeStore(initialState);\n    }\n    // 在客户端执行这个方法的时候 优先返回window上已有的store\n    // 而不能每次执行都重新创建一个store 否则状态就无限重置了\n    if (!window[__NEXT_REDUX_STORE__]) {\n        window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n    }\n    return window[__NEXT_REDUX_STORE__];\n    }\n\n    export default (Comp) => {\n    class withReduxApp extends React.Component {\n        constructor(props) {\n        super(props);\n        // getInitialProps创建了store 这里为什么又重新创建一次？\n        // 因为服务端执行了getInitialProps之后 返回给客户端的是序列化后的字符串\n        // redux里有很多方法 不适合序列化存储\n        // 所以选择在getInitialProps返回initialReduxState初始的状态\n        // 再在这里通过initialReduxState去创建一个完整的store\n        this.reduxStore = getOrCreateStore(props.initialReduxState);\n        }\n\n        render() {\n        const { Component, pageProps, ...rest } = this.props;\n        return (\n            <Comp\n            {...rest}\n            Component={Component}\n            pageProps={pageProps}\n            reduxStore={this.reduxStore}\n            />\n        );\n        }\n    }\n\n    // 这个其实是_app.js的getInitialProps\n    // 在服务端渲染和客户端路由跳转时会被执行\n    // 所以非常适合做redux-store的初始化\n    withReduxApp.getInitialProps = async (ctx) => {\n        const reduxStore = getOrCreateStore();\n        ctx.reduxStore = reduxStore;\n\n        let appProps = {};\n        if (typeof Comp.getInitialProps === \"function\") {\n            appProps = await Comp.getInitialProps(ctx);\n        }\n\n        return {\n        ...appProps,\n        initialReduxState: reduxStore.getState(),\n        };\n    };\n\n    return withReduxApp;\n};\n"]},"metadata":{},"sourceType":"module"}