{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\nconst allState = Object.assign(indexState, postState, comState); // const initialState = Object.keys(allState).map(key => {\n//     return {\n//         [key]: allState[key]()['default']\n//     }\n// })\n// console.log(initialState);\n\nconst initialState = {\n  labelPage: 0,\n  indexPage: {\n    articleData: {}\n  }\n}; // function reduxHandle({ type, action }, fn) {\n//     return fn()\n// }\n\nfunction reducer(state = initialState, action) {\n  if (action.type === 'handleLabelPage') {\n    return {\n      labelPage: Number(action.labelPage)\n    };\n  }\n\n  if (action.type === 'testHandle') {\n    return {\n      indexPage: {\n        articleData: action\n      }\n    };\n  }\n\n  return state;\n} // 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\n\n\nexport default function initializeStore(state) {\n  const store = createStore(reducer, Object.assign({}, initialState, state), applyMiddleware(ReduxThunk));\n  return store;\n}","map":{"version":3,"sources":["/Users/app/code/boke-pc-web/store/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","indexState","postState","comState","allState","Object","assign","initialState","labelPage","indexPage","articleData","reducer","state","action","type","Number","initializeStore","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,EAA0BC,SAA1B,EAAqCC,QAArC,CAAjB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMI,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,CADM;AAEjBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,WAAW,EAAE;AADN;AAFM,CAArB,C,CAOA;AAEA;AACA;;AAEA,SAASC,OAAT,CAAiBC,KAAK,GAAGL,YAAzB,EAAuCM,MAAvC,EAA+C;AAE3C,MAAIA,MAAM,CAACC,IAAP,KAAgB,iBAApB,EAAuC;AACnC,WAAO;AACHN,MAAAA,SAAS,EAAEO,MAAM,CAACF,MAAM,CAACL,SAAR;AADd,KAAP;AAGH;;AAED,MAAIK,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAC9B,WAAO;AACHL,MAAAA,SAAS,EAAE;AACPC,QAAAA,WAAW,EAAEG;AADN;AADR,KAAP;AAKH;;AAED,SAAOD,KAAP;AACH,C,CAED;AACA;AACA;;;AACA,eAAe,SAASI,eAAT,CAAyBJ,KAAzB,EAAgC;AAE3C,QAAMK,KAAK,GAAGnB,WAAW,CACrBa,OADqB,EAErBN,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,YAAlB,EAAgCK,KAAhC,CAFqB,EAGrBb,eAAe,CAACC,UAAD,CAHM,CAAzB;AAKA,SAAOiB,KAAP;AACH","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport indexState from '../store/index';\nimport postState from '../store/post';\nimport comState from '../store/com';\n\nconst allState = Object.assign(indexState, postState, comState);\n// const initialState = Object.keys(allState).map(key => {\n//     return {\n//         [key]: allState[key]()['default']\n//     }\n// })\n// console.log(initialState);\nconst initialState = {\n    labelPage: 0,\n    indexPage: {\n        articleData: {}\n    }\n};\n\n// function reduxHandle({ type, action }, fn) {\n\n//     return fn()\n// }\n\nfunction reducer(state = initialState, action) {\n    \n    if (action.type === 'handleLabelPage') {\n        return {\n            labelPage: Number(action.labelPage)\n        };\n    }\n\n    if (action.type === 'testHandle') {\n        return {\n            indexPage: {\n                articleData: action\n            }\n        };\n    }\n\n    return state;\n}\n\n// 这里暴露出的是创建store的工厂方法\n// 每次渲染都需要重新创建一个store实例\n// 防止服务端一直复用旧实例 无法和客户端状态同步\nexport default function initializeStore(state) {\n\n    const store = createStore(\n        reducer,\n        Object.assign({}, initialState, state),\n        applyMiddleware(ReduxThunk)\n    )\n    return store;\n}\n"]},"metadata":{},"sourceType":"module"}